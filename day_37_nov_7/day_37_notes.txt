
 
Managing Indexes
================
-Without indexes, MongoDB must scan every document of a collection to select those documents that match the query statement. 
-This scan is highly inefficient and require MongoDB to process a large volume of data.
-Indexes support efficient execution of queries in MongoDB
-Indexes are special data structures, that store a small portion of the data set in an easy-to-traverse form. 
-If an appropriate index exists for a query, MongoDB uses the index to limit the number of documents it must scan

db.employees.find({sal:5000}).explain('executionStats'); // nReturned, totalDocsExamined


Single Field Indexes:
-store information from a single field in a collection
 ex:db.students.createIndex( { gpa: 1 } )

Index on an Embedded Field:
db.students.createIndex( { "location.state": 1 } )

Compound Indexes:
-Compound indexes collect and sort data from two or more fields
 ex:db.students.createIndex( {name:1,gpa:-1})
   

-Create an index (db.COLLECTION_NAME.createIndex({KEY:1}))
 db.user.createIndex({"name.family": 1})
 db.user.createIndex({email: 1}, {unique: true})  
 //at most one record in the collection with a given value for that field
-See indexes on a collection
 db.user.getIndexes()
-Drop an index
 db.user.dropIndex("email")
 db.user.dropIndexes()
 

Aggregation Operations
======================
-Aggregation operations process multiple documents and return computed results
-Used to: 
	1. Group values from multiple documents together.
	2. Perform operations on the grouped data to return a single result.
	3. Analyze data changes over time.



Aggregation Pipelines
======================
-An aggregation pipeline consists of one or more stages that process documents.
-Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.
-The documents that are output from a stage are passed to the next stage as input.
-An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.

-db.collectionName.aggregate(pipeline, options)
 input --> $match  --> $group --> $sort --> output

$match, $group, $limit, $project, $sort, $addFields, $count, $lookup, $out , $unwind



Assignment
==========
1. Find distinct salaries in asccending order.
2. Find the 3rd highest salary in the employee table.
3. Find the employees whose DOB is today's date.
4. increase the salary of every employee by 500.
5. change the 'gender' of every employee (male-->female,female-->male)
5. add 'mr.' before the names of all male employees

MongoDB Atlas
=============
-MongoDB Atlas is a fully-managed cloud database.

-Register for an Atlas account
 https://www.mongodb.com/atlas/database (click on try Free)
 Fill in the registration form with your information and click Sign up
 
-Create a cluster and deploy an M0(Free) cluster
 
 
-Add your connection IP address to your IP access list
-Create a database user for your cluster
-Connect to your cluster
-Add your own data / Load Sample Data

Follow the Steps mentioned in the below URL
https://www.javatpoint.com/mongodb-atlas
https://www.freecodecamp.org/news/get-started-with-mongodb-atlas/

mongodb+srv://sanjaysamantra:<password>@cluster0.geshq.mongodb.net/?retryWrites=true&w=majority
mongodb+srv://sanjaysamantra1:berhampur@cluster0.ga81v5y.mongodb.net/
mongodb+srv://sanjaysamantra1:berhampur@cluster0.ga81v5y.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'