spawn(): when the command we want to run can output a large amount of data

fork() : communication channel is established to the child process when using fork, so we 	can use the send function on the forked process along with the global process object itself to exchange messages between the parent and forked processes.
 

C - create
R - read
U - Update
D - Delete

HTTP Module
===========
-The HTTP module can create an HTTP server.
-Receives the request from client & gives a response back to the client.


-headers, URL, method and body data can be collected from request objects.
-Make routing decisions based on URL and/or other data in request objects.
-Send headers, HTTP status codes and body data via response objects.

createServer()   		Returns a new instance of Server.
listen(PORT,CallBack)   Binds the server to listen on a specific port
close()					Stops the server from listening to more requests

response.setHeader('Content-Type', 'text/html');
response.writeHead() should be called first when initiating a response, allows 	us to set up the HTTP response code and headers we are sending back.

response.write(chunk[, encoding][, callback]) allows us to send a chunk of data as part of our response.

response.end() signalizes the response as complete, MUST be called once per response.


Note:Unless you change the path to your favicon in an HTML document, browsers will (usually) make a request to the /favicon.ico path in order to get the favicon of your server.

Http Methods
============
GET : To Read records
POST : To create a record
PUT   : create / update
PATCH  : update
DELETE : delete