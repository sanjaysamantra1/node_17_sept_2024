Event Loop
==========
-Event loop's order of operations:

1. timers: this phase executes callbacks for timers like setTimeout() and setInterval() whose delay has expired
2. I/O callbacks: executes I/O callbacks deferred to the next loop iteration.
3. idle, prepare: Used internally by Node.js and is not directly used by user applications
4. poll: retrieve new I/O events; execute I/O related callbacks 
5. check: setImmediate() callbacks are invoked here.
6. close callbacks: some close callbacks, e.g. socket.on('close', ...)


NodeJs Timers
=============
-setImmediate() is designed to execute a script once the current poll phase completes.
 setImmediate() is useful when you want to execute a callback after I/O tasks in the current event loop iteration but before timers in the next iteration
 
-setTimeout() schedules a script to be executed after a minimum threshold in ms has elapsed.
-setImmediate callbacks are called after I/O Queue callbacks are finished or timed out. setImmediate callbacks are placed in Check Queue, which are processed after I/O Queue.
-setTimeout(fn, 0) callbacks are placed in Timer Queue and will be called after I/O callbacks as well as Check Queue callbacks. As event loop, process the timer queue first in each iteration, so which one will be executed first depends on which phase event loop is.

-if we run setImmediate() & setTimeout() which is not within an I/O cycle (i.e. the main module), the order in which the two timers are executed is non-deterministic.
-However, if you move the two calls within an I/O cycle, the immediate callback is always executed first.