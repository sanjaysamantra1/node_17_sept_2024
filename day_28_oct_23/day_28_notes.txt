How to use Express
==================
1. import express
   const express = require('express')
2. create an instance of express.
   const app = express()
3. use methods
   app.get(route, callback)
   app.post(route, callback)


Express Methods
===============
app.get()
app.post()
app.put()
app.patch()
app.delete()
app.listen()
app.use()
app.all()



app.use() vs app.get()
======================
-app.use() is generally used for introducing middlewares and can handle all type of HTTP requests.
-app.get() is only for handling GET HTTP requests.


app.use() vs app.all()
======================
app.use() will only see whether url starts with specified path.
app.all() will match the complete path.

app.use( "/book" , middleware);
// will match /book
// will match /book/author
// will match /book/subject

app.all( "/book" , handler);
// will match /book
// won't match /book/author   
// won't match /book/subject    

app.all( "/book/*" , handler);
// won't match /book        
// will match /book/author
// will match /book/subject



Express.js Request Object Properties
====================================
req.app
req.body
req.cookies
req.hostname
req.ip
req.method
req.params
req.path
req.protocol
req.query



Response methods
================
The methods on the response object (res) in the following table can send a response to the client, and terminate the request-response cycle. If none of these methods are called from a route handler, the client request will be left hanging.

Method	Description
res.send()	Send a response of various types. (Buffer / JSON / HTML / String)
res.end()	End the response process.
res.json()	Send a JSON response.
res.jsonp()	Send a JSON response with JSONP support.
res.redirect()	Redirect a request.
res.render()	Render a view template.
res.sendFile()	Send a file as an octet stream.
res.download()	Prompt a file to be downloaded.
res.sendStatus()	Set the response status code and send its string representation as the response body.


Status() vs sendStatus()
========================
res.sendStatus(200); // equivalent to res.status(200).send('OK') 
res.sendStatus(403); // equivalent to res.status(403).send('Forbidden')
res.sendStatus(404); // equivalent to res.status(404).send('Not Found') 
res.sendStatus(500); // equivalent to res.status(500).send('Internal Server Error')



Express Routers
===============
-Routing refers to how an applicationâ€™s endpoints (URIs) respond to client requests.

express.Router()
================
-express.Router() function is used to create a new router object.
-To create a new router object in our program to handle requests.
-Use the express.Router class to create modular, mountable route handlers.
-router.use(timeLog) , adds a middleware for a router object



Serving static files in Express
===============================
-To serve static files such as images, CSS files, and JavaScript files, use the express.static() built-in middleware function in Express. 
express.static(root<directory Name>, [options])
-The root argument specifies the root directory from which to serve static assets.
 app.use(express.static('public'))
-To use multiple static assets directories, call the express.static() middleware function multiple times:
	app.use(express.static('public'))
	app.use(express.static('files'))
	
	

Middlewares
===========
-Middlewares in ExpressJS are functions that can modify Request and Response objects.
-Either to retrieve something from request Object or to store something in response object.
-An example of a simple express js middleware could be to log the current date and time on every URL the user visits on our website.

request => middleware1 => middleware2 => Route => Response

https://www.turing.com/kb/building-middleware-for-node-js
https://expressjs.com/en/guide/using-middleware.html
https://expressjs.com/en/resources/middleware/body-parser.html

logger middleware
==================
const logger = (req, res, next) => {
  console.log('The time is: '+ Date.now())
  next();
}

An Express application can use the following types of middleware:
1. Application-level middleware
   app.use(logger)
2. Router-level middleware
   const userRouter = express.Router();
   userRouter.use(logger);
3. Error-handling middleware
   try{
   }catch(err){
	 next(err); // transfers error object to error handling middleware
   }   
4. Built-in middleware
    express.static()
	express.json()        converts request body to JSON.     
	express.urlencoded()  converts form-data to JSON
5. Third-party middleware 
   cors , body-parser, cookie-parser
   


Q.How to run a middleware for all the routes in an application
  app.use(logger);
  
Q.How to run a middleware for all the routes for a router object
  const userRouter = express.Router();
  userRouter.use(logger);

Q.How to run a middleware for a particular route
  app.get('/route1', middleware,routeHandler);
  
 
 
authenticate middleware
=====================
const authenticate = (req, res, next) => {
    const token = req.headers['authorization'];
    if (token === 'mysecrettoken') {
        next(); // User is authenticated, proceed to next middleware or route handler
    } else {
        res.status(401).json({ message: 'Unauthorized' });
    }
};


Error handler
=============
let myError = (err, req, res, next) => {
  const errorStatus = err.status || 500;
  const errorMessage = err.message || 'Something went wrong, Try again!';
 
  res.status(errorStatus).json({
    status: errorStatus,
    message: errorMessage,
    stack: err.stack,
    success: false,
  });
};